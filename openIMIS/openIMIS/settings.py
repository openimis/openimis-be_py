"""
Django settings for openIMIS project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import json
from .openimisapps import openimis_apps

from dotenv import load_dotenv
load_dotenv()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

def SITE_ROOT():
    root = os.environ.get("SITE_ROOT", '')
    if (root == ''):
        return root
    elif (root.endswith('/')):
        return root
    else:
        return "%s/" % root


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "SECRET_KEY", 'chv^^7i_v3-04!rzu&qe#+h*a=%h(ib#5w9n$!f2q7%2$qp=zz')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True # bool(os.environ.get("DEBUG", False)) - need to fix static file serving before turning it False

if ("ALLOWED_HOSTS" in os.environ):
    ALLOWED_HOSTS = json.loads(os.environ["ALLOWED_HOSTS"])
else:
    ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rules',
    'rest_framework_rules',
]
INSTALLED_APPS += openimis_apps()

AUTHENTICATION_BACKENDS = []
if bool(os.environ.get("REMOTE_USER_AUTHENTICATION", False)):
    AUTHENTICATION_BACKENDS += ['core.security.RemoteUserBackend']

AUTHENTICATION_BACKENDS += [
    'rules.permissions.ObjectPermissionBackend',
    'django.contrib.auth.backends.ModelBackend',
]

ANONYMOUS_USER_NAME = None

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'core.security.ObjectPermissions'
    ]
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware'
]
if bool(os.environ.get("REMOTE_USER_AUTHENTICATION", False)):
    MIDDLEWARE += [
        'core.security.RemoteUserMiddleware'
    ]
MIDDLEWARE += [
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'openIMIS.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'openIMIS.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

if ("DB_OPTIONS" in os.environ):
    DATABASE_OPTIONS = json.loads(os.environ["DB_OPTIONS"])
else:
    DATABASE_OPTIONS = {
        'driver': 'ODBC Driver 17 for SQL Server',
        'unicode_results': True
    }

DATABASES = {
    'default': {
        'ENGINE': os.environ.get('DB_ENGINE', 'sql_server.pyodbc'),
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'HOST': os.environ.get('DB_HOST'),
        'PORT': os.environ.get('DB_PORT'),
        'OPTIONS': DATABASE_OPTIONS}
}

AUTH_USER_MODEL = 'core.User'

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = "/%sstatic/" % SITE_ROOT()

